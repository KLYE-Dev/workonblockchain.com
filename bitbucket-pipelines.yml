# This is a sample build configuration for JavaScript.
# Check our guides at https://confluence.atlassian.com/x/14UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: node:8.10

pipelines:
  branches:
      staging:
      - parallel:
        - step:
              name: "Deploy client to staging"
              script:
                - cd client
                - npm install
                - npm run build:serverless:staging
                - npm install -g serverless
                - serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY
                - serverless deploy --stage staging
        - step:
              name: "Deploy server to staging"
              script:
              - cd server
              - git config --global user.name "WOB"
              - git config --global user.email "contact@workonblockchain.com"
              - git log --pretty=format:'%h' -n 1
              - GIT_HASH=$(git log --pretty=format:'%h' -n 1)
              - ZIP_FILE=$GIT_HASH"-staging.zip"
              - echo $ZIP_FILE
              - apt-get update
              - apt-get install zip
              - zip $ZIP_FILE *
              - pipe: atlassian/aws-elasticbeanstalk-deploy:0.2.1
                variables:
                  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                  AWS_DEFAULT_REGION: "eu-west-1"
                  APPLICATION_NAME: "staging.workonblockchain.com"
                  ZIP_FILE: $ZIP_FILE
                  S3_BUCKET: "elasticbeanstalk-eu-west-1-831241436261"
                  VERSION_LABEL: $GIT_HASH
                  ENVIRONMENT_NAME: "staging-api-workonblockchain-com"
      master:
        - step:
            name: Run server unit tests
            caches:
              - node
            script:
              - cd server
              - npm install
              - npm test
            services:
              - mongo
        - step:
            name: Deploy server and client to production
            deployment: production
            trigger: manual
            script:
              - cd client
              - npm install
              - npm install -g @angular/cli
              - cd ../scripts
              - npm install
              - cd ../
              - node scripts/client.js production
              - node scripts/server.js production
options:
  max-time: 20

definitions:
  services:
    mongo:
      image: mongo:3.6.8
